AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation Template to build email attachment extraction infastructure. 
Parameters:
  ConfigSetName:
    Type: String
Resources:
  # S3 Bucket to Hold Raw EmaiL Files from SES
  MailBucket:
    Type: AWS::S3::Bucket
      
  MailBucketNotification:
    Type: AWS::S3::BucketNotification
    Properties:
      Bucket: !Ref MailBucket
      NotificationConfiguration:
        LambdaConfiguration:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt ExtractionFunctions.Arn

  # Bucket Policy For MailBucket allowing SES to place files in the bucket. 
  MailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MailBucket
      PolicyDocument:
        Statement:
          - 
            Sid: Allow placing emails into bucket from SES
            Action:
              - s3:PutObject
            Effect: Allow
            Resource: 
              - !Sub '${MailBucket.Arn}'
              - !Sub '${MailBucket.Arn}/*'
            Principal:
              Service: ses.amazonaws.com

  # S3 Bucket to store extracted attachments. 
  AttachmentBucket: 
    Type: AWS::S3::Bucket

  # Configuration for sending email via SES
  ConfigSet:
    Type: AWS::SES::ConfigurationSet
    Properties:
      Name: !Ref ConfigSetName

  # Rules for recieving emails. 
  DefaultRuleSet:
    Type: AWS::SES::ReceiptRuleSet

  # Default Rule for email from *@dev.test.com
  DefaultRule:
    Type: AWS::SES::ReceiptRule
    Properties:
      Rule:
        Recipients:
          - "dev.test.com"
        Actions:
          - S3Action:
              BucketName: !Ref MailBucket
        Enabled: true
        ScanEnabled: true
      RuleSetName: !Ref DefaultRuleSet
    DependsOn: MailBucketPolicy

  # IAM Managed Policy for extraction role. 
  AttachmentExtractionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowGetAndDeleteMailFiles
            Effect: Allow
            Action: 
              - S3:DeleteObject
              - S3:GetObject
            Resource:
              - !Sub '${MailBucket.Arn}'
              - !Sub '${MailBucket.Arn}/*'
          - Sid: AllowPutAttachments
            Effect: Allow
            Action:
              - S3:Put
            Resource:
              - !Sub '${AttachmentBucket.Arn}'
              - !Sub '${AttachmentBucket.Arn}/*'

  # Role used by Lambda to extract attachments. 
  AttachmentExtractionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref AttachmentExtractionPolicy

  ExtractionFunctions:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Role: !GetAtt AttachmentExtractionRole.Arn
      Handler: index.lambda_handler
      Environment:
        Variables:
          DESTINATION_BUCKET: !Ref AttachmentBucket
      Code:
        ZipFile: |
          import os
          import boto3
          import email
          from email.mime.multipart import MIMEMultipart
          from email.mime.text import MIMEText

          s3_client = boto3.client('s3')

          def lambda_handler(event, context):
              # Get the destination bucket ARN from environment variables
              destination_bucket_arn = os.environ.get('DESTINATION_BUCKET')

              # Iterate through the S3 events triggered by the PUT operation
              for record in event['Records']:
                  bucket_name = record['s3']['bucket']['name']
                  object_key = record['s3']['object']['key']

                  # Download the email file from S3
                  email_object = s3_client.get_object(Bucket=bucket_name, Key=object_key)
                  email_content = email_object['Body'].read().decode('utf-8')

                  # Parse the email
                  msg = email.message_from_string(email_content)

                  # Process email attachments
                  for part in msg.walk():
                      if part.get_content_maintype() == 'multipart':
                          continue
                      if part.get('Content-Disposition') is None:
                          continue

                      # Extract attachment
                      attachment = part.get_payload(decode=True)
                      attachment_name = part.get_filename()

                      # Upload the attachment to the destination bucket
                      s3_client.put_object(Bucket=destination_bucket_arn, Key=attachment_name, Body=attachment)

              return {
                  'statusCode': 200,
                  'body': 'Attachments extracted and uploaded successfully.'
              }
      Description: Extract Attachments From Email Files

  # Allow S3 to call the Lambda
  MailBucketLambdaRule:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref ExtractionFunctions
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt MailBucket.Arn
      SourceAccount: !Ref AWS::AccountId